// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          String   @default("employee") // "admin" or "employee"

  // Employee-related fields
  positions     EmployeePosition[]
  shiftRequests ShiftRequest[]
  shifts        Shift[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Position {
  id            String         @id @default(cuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  shiftRequests ShiftRequest[]
  shifts        Shift[]
  requiredStaffs RequiredStaff[]
  users         EmployeePosition[]

  @@map("positions")
}

model EmployeePosition {
  id         String   @id @default(cuid())
  userId     String
  positionId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@unique([userId, positionId])
  @@map("employee_positions")
}

model ShiftRequest {
  id         String   @id @default(cuid())
  userId     String
  positionId String?
  date       DateTime @db.Date
  startTime  String
  endTime    String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position   Position? @relation(fields: [positionId], references: [id])

  shiftId    String?  @unique
  shift      Shift?   @relation(fields: [shiftId], references: [id])

  @@map("shift_requests")
}

model Shift {
  id         String   @id @default(cuid())
  userId     String
  positionId String
  date       String
  startTime  String
  endTime    String
  status     String   @default("DRAFT")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  request    ShiftRequest?

  @@map("shifts")
}

model RequiredStaff {
  id         String   @id @default(cuid())
  positionId String
  dayOfWeek  Int
  timeSlot   String
  count      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@map("required_staffs")
}
